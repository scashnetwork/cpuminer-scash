name: Build Linux x64
on:
  workflow_call:
    inputs:
      release-name:
        description: 'Tag passed from the caller workflow'
        default: ${{ github.sha }}
        required: false
        type: string
  workflow_dispatch:
      
jobs:
  build:
    name: 'Build in Docker container running Alpine Linux'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    env:
      BASE_ROOT_DIR: ${{ github.workspace }}
      TARGET_ARCH: linux-static-x64

    steps:
      - name: Setup variables
        run: |
          RELEASE_NAME=${{ inputs.release-name }}
          if [[ -z "$RELEASE_NAME" ]]; then
            RELEASE_NAME=${{ github.sha }}
          fi
          RELEASE_NAME=${RELEASE_NAME#v}
          RELEASE_NAME=${RELEASE_NAME//\//-}  # Replace slashes with hyphens
          echo "RELEASE_FOLDER=cpuminer-scash-$RELEASE_NAME-$TARGET_ARCH" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Run build script
        run: |
          ./build-linux-static.sh
          cp -a out/minerd ./
      
      - name: Verify static build
        run: |
          file minerd | grep -q "statically linked"

      - name: Test benchmarking
        run: |
          ./minerd --version
          ./minerd --benchmark

      - name: Package artifact
        run: |
          mkdir $RELEASE_FOLDER
          cp -a minerd $RELEASE_FOLDER
          cd $RELEASE_FOLDER && sha256sum * >SHA256SUMS && cd ..
          # sha256sum $RELEASE_FOLDER/* >$RELEASE_FOLDER/SHA256SUMS
          ARTIFACT_FILENAME=$RELEASE_FOLDER.tgz
          tar -czvf $ARTIFACT_FILENAME $RELEASE_FOLDER
          echo "ARTIFACT_FILENAME=$ARTIFACT_FILENAME" >> "$GITHUB_ENV"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILENAME }}
          path: ${{ env.ARTIFACT_FILENAME }}
          retention-days: 1
          if-no-files-found: error

      - name: Package Hiveon artifact
        run: |
          cp -r hiveon cpuminer_scash
          cp -a minerd cpuminer_scash/cpuminer_scash_bin
          cd cpuminer_scash
          envsubst <h-manifest-template.conf >h-manifest.conf
          rm h-manifest-template.conf
          cd ..
          ARTIFACT_FILENAME=cpuminer_scash-${RELEASE_NAME}_hiveon.tar.gz
          tar -czvf $ARTIFACT_FILENAME cpuminer_scash
          echo "ARTIFACT_FILENAME=$ARTIFACT_FILENAME" >> "$GITHUB_ENV"

      - name: Upload Hiveon artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILENAME }}
          path: ${{ env.ARTIFACT_FILENAME }}
          retention-days: 1
          if-no-files-found: error

      - name: Cancel parallel jobs
        if: failure()
        uses: andymckay/cancel-action@0.4
